This is the initial commit, formatting will follow when I have more time.

Last digits of N^==N

This is a very simply formulated task. Let's call an integer number N 'green' if N² ends with all of the digits of N. Some examples:

5 is green, because 5² = 25 and 25 ends with 5.

11 is not green, because 11² = 121 and 121 does not end with 11.

376 is green, because 376² = 141376 and 141376 ends with 376.

Your task is to write a function green that returns the nth green number, starting with 1 - green (1) == 1

 ##########################################################################

I approached this from a couple different ways.

My initial approach of brute-forcing the checking of N in the sliced output of N^ 
was obviously not an efficient approach and timed out the code-wars terminal at 12000ms

My second attempt was to try multithreading the finding of the green numbers in a task split in half. While this cut my execution time considerably, my function no longer timed out, and
I still got an error that prevented my completion due to the way the test does each check.
The cumulative execution time of checking a large set of results for final verification 
exceeded the 12000ms execution time limit.

My third attempt was to use caching to store the function result and shave execution time off the final checks.
See below

 ##########################################################################
import functools


@functools.lru_cache(maxsize=5000)  # cache the results of the function call
def gen_greens(n, greens=None):
    if greens is None:
        greens = {0, 1, 5, 6}
    special_five = 5
    for k in range(0, 5000):
        special_five = (-2 * special_five ** 3 + 3 * special_five ** 2) % (10 ** (k + 1))
        special_six = 10 ** (k + 1) + 1 - special_five
        if special_six < special_five:
            if special_six > (10 ** k):
                greens.add(int(special_six))
            if special_five > (10 ** k):
                greens.add(int(special_five))
        else:
            if special_five > (10 ** k):
                greens.add(int(special_five))
            if special_six > (10 ** k):
                greens.add(int(special_six))
    return greens


def green(n):
    # checks if n is less than the length of greens
    # if it is, return the nth element of greens
    # if it is not, call gen_greens(n) and return the nth element of the result
    greens = gen_greens(n)
    if n < len(greens):
        return sorted(list(greens))[n]
    else:
        return sorted(list(gen_greens(n)))[n]
 ##########################################################################

This ran into an issue with the limit of the length of strings that can be converted into ints.
This limit is apparently 4300 characters which is insufficient for returning the larger green numbers.

After doing some research on number series and automorphic numbers, I came upon a relevant A003226 OEIS. The Online Encyclopedia of Integer Sequences included information on the generation of the sequence. I incorporated the OEIS information in the construction of the following code which did complete the challenge the required 109 times with an execution time of 6700ms.
  ##########################################################################   
from itertools import count, islice


# chinese remainder theorem
def crt(n, a):
    N = 1
    for i in n:
        N *= i
    x = 0
    for i in range(len(n)):
        x += a[i] * N // n[i] * pow(N // n[i], -1, n[i])
    return x % N, N

# generator of "green" automorphic numbers according to the A003226
def green_generator():
    a = 0
    yield from (0, 1)
    for n in count(0):
        b = sorted((int(crt(m := (1 << n, 5 ** n), (0, 1))[0]), int(crt(m, (1, 0))[0])))
        if b[0] > a:
            yield from b
            a = b[1]
        elif b[1] > a:
            yield b[1]
            a = b[1]


green_list = list(islice(green_generator(), 5001))


def green(n):
    return green_list[n]
  ##########################################################################   
